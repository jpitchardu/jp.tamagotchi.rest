// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: jp.tamagotchi.proto.business/service/transaction/transactionService.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Jp.Tamagotchi.Business.Shared.Services.Transaction {
  public static partial class TransactionService
  {
    static readonly string __ServiceName = "jp.tamagotchi.business.shared.services.transaction.TransactionService";

    static readonly grpc::Marshaller<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionRequest> __Marshaller_SaveTransactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionResponse> __Marshaller_SaveTransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsRequest> __Marshaller_GetTransactionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsResponse> __Marshaller_GetTransactionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionRequest, global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionResponse> __Method_SaveTransaction = new grpc::Method<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionRequest, global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SaveTransaction",
        __Marshaller_SaveTransactionRequest,
        __Marshaller_SaveTransactionResponse);

    static readonly grpc::Method<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsRequest, global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsResponse> __Method_GetTransactions = new grpc::Method<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsRequest, global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactions",
        __Marshaller_GetTransactionsRequest,
        __Marshaller_GetTransactionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Jp.Tamagotchi.Business.Shared.Services.Transaction.TransactionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TransactionService</summary>
    public abstract partial class TransactionServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionResponse> SaveTransaction(global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsResponse> GetTransactions(global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TransactionService</summary>
    public partial class TransactionServiceClient : grpc::ClientBase<TransactionServiceClient>
    {
      /// <summary>Creates a new client for TransactionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TransactionServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TransactionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TransactionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TransactionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TransactionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionResponse SaveTransaction(global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionResponse SaveTransaction(global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionResponse> SaveTransactionAsync(global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionResponse> SaveTransactionAsync(global::Jp.Tamagotchi.Business.Shared.Services.Transaction.SaveTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveTransaction, null, options, request);
      }
      public virtual global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsResponse GetTransactions(global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTransactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsResponse GetTransactions(global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsResponse> GetTransactionsAsync(global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTransactionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsResponse> GetTransactionsAsync(global::Jp.Tamagotchi.Business.Shared.Services.Transaction.GetTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TransactionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TransactionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TransactionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SaveTransaction, serviceImpl.SaveTransaction)
          .AddMethod(__Method_GetTransactions, serviceImpl.GetTransactions).Build();
    }

  }
}
#endregion
